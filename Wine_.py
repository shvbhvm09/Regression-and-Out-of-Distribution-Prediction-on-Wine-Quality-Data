# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yOcqBXIZqN2KZpb0cD8ESYSVaOGCB_08
"""

import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
import pickle

# Load the trained Random Forest model for red wine from the pickle file
with open("/content/random_forest_red_model.pkl", "rb") as file:
    rf_red_model = pickle.load(file)

# Define a function to predict wine quality
def predict_wine_quality(fixed_acidity, volatile_acidity, citric_acid, residual_sugar, chlorides,
                         free_sulfur_dioxide, total_sulfur_dioxide, density, pH, sulphates, alcohol):
    # Create a DataFrame with user input
    user_input = pd.DataFrame({
        'fixed acidity': [fixed_acidity],
        'volatile acidity': [volatile_acidity],
        'citric acid': [citric_acid],
        'residual sugar': [residual_sugar],
        'chlorides': [chlorides],
        'free sulfur dioxide': [free_sulfur_dioxide],
        'total sulfur dioxide': [total_sulfur_dioxide],
        'density': [density],
        'pH': [pH],
        'sulphates': [sulphates],
        'alcohol': [alcohol]
    })
    # Predict wine quality
    prediction = rf_red_model.predict(user_input)
    return prediction[0]

# Create GUI elements using Streamlit
st.title('Red Wine Quality Predictor')

# Add sliders for each input feature
fixed_acidity = st.slider('Fixed Acidity', 4.0, 16.0, 8.0)
volatile_acidity = st.slider('Volatile Acidity', 0.0, 2.0, 0.5)
citric_acid = st.slider('Citric Acid', 0.0, 1.0, 0.5)
residual_sugar = st.slider('Residual Sugar', 0.0, 20.0, 10.0)
chlorides = st.slider('Chlorides', 0.0, 0.6, 0.08)
free_sulfur_dioxide = st.slider('Free Sulfur Dioxide', 1.0, 72.0, 30.0)
total_sulfur_dioxide = st.slider('Total Sulfur Dioxide', 6.0, 289.0, 100.0)
density = st.slider('Density', 0.9900, 1.0030, 0.9950)
pH = st.slider('pH', 2.0, 5.0, 3.0)
sulphates = st.slider('Sulphates', 0.0, 2.0, 0.5)
alcohol = st.slider('Alcohol', 8.0, 15.0, 10.0)

# When 'Predict' button is clicked, make prediction and display result
if st.button('Predict'):
    wine_quality = predict_wine_quality(fixed_acidity, volatile_acidity, citric_acid, residual_sugar,
                                         chlorides, free_sulfur_dioxide, total_sulfur_dioxide,
                                         density, pH, sulphates, alcohol)
    st.success(f'The predicted wine quality is {wine_quality}')
